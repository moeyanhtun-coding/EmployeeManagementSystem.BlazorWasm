@page "/login"
@using EmployeeManagementSystem.Model.Models
@using EmployeeManagementSystem.Wasm.Authentication
@using EmployeeManagementSystem.Wasm.Layout
@using Newtonsoft.Json
@layout EmptyLayout
@inject AuthenticationStateProvider AuthStateProvider

<EditForm Model="_loginModel" FormName="Login" OnValidSubmit="HandleLogin">
    <div class="container row d-flex justify-content-center align-items-center">
        <div class="offset-4 col-4">
            <div class="form-group mb-3">
                <label for="exampleInputEmail1">Email address</label>
                <input type="text" class="form-control" id="exampleInputEmail1" placeholder="Enter Username" @bind-value="_loginModel.Username">
            </div>
            <div class="form-group mb-3">
                <label for="exampleInputPassword1">Password</label>
                <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password" @bind-value="_loginModel.Password">
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
    </div>
</EditForm>

@code {
    private LoginModel _loginModel = new LoginModel();

    private async Task HandleLogin()
    {
        var res = await httpClient.PostAsJsonAsync("api/auth/login", _loginModel);
        if (res.IsSuccessStatusCode)
        {
            var jsonStr = await res.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<LoginResponseModel>(jsonStr);

            if (result is not null && result.Token is not null)
            { 
                await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsAuthenticated(result);
                nav.NavigateTo("/");
            }
            else
            {
                toastService.ShowError("Credential Do Not Match.");
            }
        }
        else
        {
          
            var content = await res.Content.ReadAsStringAsync();

            try
            {
                var errorResponse = JsonConvert.DeserializeObject<ValidationErrorResponse>(content);

                if (errorResponse?.Errors != null)
                {
                    foreach (var fieldErrors in errorResponse.Errors)
                    {
                        foreach (var errorMsg in fieldErrors.Value)
                        {
                            toastService.ShowError(errorMsg);
                        }
                    }
                }
                else
                {
                    toastService.ShowError("An unknown error occurred.");
                }
            }
            catch
            {
                toastService.ShowError("Failed to parse error response.");
            }
        }
    }
}
